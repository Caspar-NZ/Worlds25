package org.firstinspires.ftc.teamcode.autos;

import androidx.annotation.NonNull;
import com.acmerobotics.dashboard.config.Config;
import com.acmerobotics.dashboard.telemetry.TelemetryPacket;
import com.acmerobotics.roadrunner.Action;
import com.acmerobotics.roadrunner.ParallelAction;
import com.acmerobotics.roadrunner.Pose2d;
import com.acmerobotics.roadrunner.SequentialAction;
import com.acmerobotics.roadrunner.TrajectoryActionBuilder;
import com.acmerobotics.roadrunner.Vector2d;
import com.acmerobotics.roadrunner.ftc.Actions;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import org.firstinspires.ftc.teamcode.MecanumDrive;
import org.firstinspires.ftc.teamcode.functions.intake;
import org.firstinspires.ftc.teamcode.functions.outtake;
import org.firstinspires.ftc.teamcode.functions.horiSlides;
import org.firstinspires.ftc.teamcode.functions.vertSlide;

@Config
@Autonomous(name = "FiveSpecimen", group = "Autonomous")
public class FiveSpecimen extends LinearOpMode {

    private Thread asyncUpdatesThread;
    private volatile boolean asyncThread = true;

    @Override
    public void runOpMode() {

        // Initialize subsystems
        outtake outtakeSystem = new outtake(hardwareMap);
        intake intakeSystem = new intake(hardwareMap);
        horiSlides horizontalSlides = new horiSlides(hardwareMap);
        vertSlide verticalSlides = new vertSlide(hardwareMap);

        // Define the runnable for async updates
        Runnable asyncUpdates = new Runnable() {
            @Override
            public void run() {
                while (asyncThread && !Thread.currentThread().isInterrupted()) {
                    horizontalSlides.update();
                    verticalSlides.update();
                    outtakeSystem.update();
                    intakeSystem.update();

                    // Add slight delay to avoid rapid updates causing jitter
                    try {
                        Thread.sleep(5); // Sleep for 20 ms to give hardware time to respond
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt(); // Ensure the thread exits if interrupted
                    }
                }
            }
        };

        // Initialize but do not start the thread yet
        asyncUpdatesThread = new Thread(asyncUpdates);

        // Set the initial pose and initialize the drive system
        Pose2d initialPose = new Pose2d(-4, 62, Math.toRadians(270));
        MecanumDrive drive = new MecanumDrive(hardwareMap, initialPose);

        ////////////////////////////////  section 1    ///////////////////////////////////////
        TrajectoryActionBuilder trajectory1 = drive.actionBuilder(initialPose)
                .strafeTo(new Vector2d(-2.5, 28));

        Action trajectory1WithParallel = new ParallelAction(
                trajectory1.build(),
                (telemetryPacket) -> { // Run some action
                    verticalSlides.setPosition(verticalSlides.MIN_POSITION + 450);
                    return false;
                }
                /*
                new Action() {
                    @Override
                    public boolean run(@NonNull TelemetryPacket packet) {
                        verticalSlides.setPosition(verticalSlides.MIN_POSITION + 450);
                        return false; // Mark action as complete immediately
                    }
                }*/
        );

        ////////////////////////////////  section 2    ///////////////////////////////////////

        TrajectoryActionBuilder trajectory2 = drive.actionBuilder(new Pose2d(-2.5, 28, Math.toRadians(270)))
                .setReversed(true)
                .waitSeconds(1)
                .strafeToLinearHeading(new Vector2d(-37, 50), Math.toRadians(250));

        Action trajectory2WithParallel = new ParallelAction(
                trajectory2.build(),
                (telemetryPacket) -> { // Run some action
                    verticalSlides.setPosition(verticalSlides.MIN_POSITION +600);
                    while (verticalSlides.getCurrentPosition() < verticalSlides.MIN_POSITION +600){
                        //hey whats up
                    }
                    outtakeSystem.clawOpen(true);
                    long waitStartTime = System.currentTimeMillis();
                    while (System.currentTimeMillis() - waitStartTime < 500) {
                        // Wait for 1 second without blocking other operations
                    }
                    verticalSlides.setPosition(verticalSlides.MIN_POSITION);
                    return false;
                }
                /*new Action() {
                    @Override
                    public boolean run(@NonNull TelemetryPacket packet) {
                        verticalSlides.setPosition(verticalSlides.MIN_POSITION +550);
                        while (verticalSlides.getCurrentPosition() < verticalSlides.MIN_POSITION +550){
                            //hey whats up
                        }
                        outtakeSystem.clawOpen(true);
                        verticalSlides.setPosition(verticalSlides.MIN_POSITION);


                        return false; // Mark action as complete immediately
                    }
                }*/


        );

        ////////////////////////////////  section 3    ///////////////////////////////////////

        TrajectoryActionBuilder trajectory3 = drive.actionBuilder(new Pose2d(-37, 50, Math.toRadians(220)))
                .waitSeconds(2)
                .setReversed(true)
                .strafeToLinearHeading(new Vector2d(-34, 64), Math.toRadians(270));

        Action trajectory3WithParallel = new ParallelAction(
                trajectory3.build(),
                (telemetryPacket) -> { // Run some action
                    intakeSystem.open(false);
                    intakeSystem.intakeRotatedUp(false);
                    horizontalSlides.setPosition(1150);
                    while (horizontalSlides.getCurrentPosition() < 300){
                        //hey whats up
                    }

                    intakeSystem.setSpeed(-1.0, 1.0);
                    while (horizontalSlides.getCurrentPosition() < 1120){
                        intakeSystem.setSpeed(-1.0, 1.0);
                        //hey whats up
                    }
                    horizontalSlides.setPosition(25);
                    intakeSystem.intakeRotatedUp(true);
                    intakeSystem.setSpeed(0.0, 0.0);
                    outtakeSystem.clawOpen(false);
                    outtakeSystem.hookAtIntake(true);
                    while (horizontalSlides.getCurrentPosition() > 25){
                        //hey whats up
                    }
                    intakeSystem.setSpeed(0.6, -0.6);
                    outtakeSystem.clawOpen(true);
                    return false;
                }
        /*new Action() {
            @Override
            public boolean run(@NonNull TelemetryPacket packet) {
                intakeSystem.intakeRotatedUp(false);
                horizontalSlides.setPosition(1000);
                while (horizontalSlides.getCurrentPosition() < 300){
                    //hey whats up
                }

                intakeSystem.setSpeed(-1.0, 1.0);
                while (horizontalSlides.getCurrentPosition() < 980){
                    intakeSystem.setSpeed(-1.0, 1.0);
                    //hey whats up
                }
                horizontalSlides.setPosition(25);
                intakeSystem.intakeRotatedUp(true);
                intakeSystem.setSpeed(0.0, 0.0);
                outtakeSystem.clawOpen(false);
                outtakeSystem.hookAtIntake(true);

                return false; // Mark action as complete immediately
            }
        }*/


        );

        ////////////////////////////////  section 4    ///////////////////////////////////////

        TrajectoryActionBuilder trajectory4 = drive.actionBuilder(new Pose2d(-34, 66, Math.toRadians(270)))
                .setReversed(false)
                .waitSeconds(20)
                .strafeToLinearHeading(new Vector2d(-2, 32), Math.toRadians(270));

        Action trajectory4WithParallel = new ParallelAction(
                trajectory4.build(),
                (telemetryPacket) -> { // Run some action
                    //outtakeSystem.clawOpen(true);
                    return false;
                }
        );

        ////////////////////////////////  section 5    ///////////////////////////////////////

        TrajectoryActionBuilder trajectory5 = drive.actionBuilder(new Pose2d(-2, 32, Math.toRadians(270)))
                .setReversed(true)
                .strafeToLinearHeading(new Vector2d(-40, 50), Math.toRadians(220));

        ////////////////////////////////  section 6    ///////////////////////////////////////

        TrajectoryActionBuilder trajectory6 = drive.actionBuilder(new Pose2d(-40, 50, Math.toRadians(220)))
                .strafeToLinearHeading(new Vector2d(-34, 60), Math.toRadians(270));

        ////////////////////////////////  section 7    ///////////////////////////////////////

        TrajectoryActionBuilder trajectory7 = drive.actionBuilder(new Pose2d(-34, 60, Math.toRadians(270)))
                .setReversed(false)
                .strafeToLinearHeading(new Vector2d(0, 32), Math.toRadians(270));

        ////////////////////////////////  section 8    ///////////////////////////////////////

        TrajectoryActionBuilder trajectory8 = drive.actionBuilder(new Pose2d(0, 32, Math.toRadians(270)))
                .setReversed(true)
                .strafeToLinearHeading(new Vector2d(-46, 50), Math.toRadians(220));

        ////////////////////////////////  section 9    ///////////////////////////////////////

        TrajectoryActionBuilder trajectory9 = drive.actionBuilder(new Pose2d(-46, 50, Math.toRadians(220)))
                .strafeToLinearHeading(new Vector2d(-34, 60), Math.toRadians(270));

        ////////////////////////////////  section 10    ///////////////////////////////////////

        TrajectoryActionBuilder trajectory10 = drive.actionBuilder(new Pose2d(-34, 60, Math.toRadians(270)))
                .setReversed(false)
                .strafeToLinearHeading(new Vector2d(2, 32), Math.toRadians(270));

        ////////////////////////////////  section 11    ///////////////////////////////////////

        TrajectoryActionBuilder trajectory11 = drive.actionBuilder(new Pose2d(2, 32, Math.toRadians(270)))
                .setReversed(true)
                .strafeToLinearHeading(new Vector2d(-34, 60), Math.toRadians(270));

        ////////////////////////////////  section 12    ///////////////////////////////////////

        TrajectoryActionBuilder trajectory12 = drive.actionBuilder(new Pose2d(-34, 60, Math.toRadians(270)))
                .setReversed(false)
                .strafeToLinearHeading(new Vector2d(4, 32), Math.toRadians(270));



        // Build actions to run trajectories sequentially
        Action runTrajectories = new SequentialAction(
                trajectory1WithParallel,
                trajectory2WithParallel,
                trajectory3WithParallel,
                trajectory4WithParallel
                /*
                trajectory3.build(),
                trajectory4WithParallel,
                trajectory5.build(),
                trajectory6.build(),
                trajectory7.build(),
                trajectory8.build(),
                trajectory9.build(),
                trajectory10.build(),
                trajectory11.build(),
                trajectory12.build()*/
        );

        // Prepare robot state before starting the auto sequence
        intakeSystem.intakeRotatedUp(true);
        outtakeSystem.clawOpen(false);
        outtakeSystem.bucketAtIntakePos(true);
        outtakeSystem.hookAtIntake(false);

        // Start the async updates thread
        asyncThread = true;
        asyncUpdatesThread.start();

        // Notify that the robot is ready to start
        telemetry.addData("Status", "Waiting for start");
        telemetry.update();

        waitForStart();

        if (isStopRequested()) {
            shutdownThread();
            return;
        }

        // Run the trajectories one after the other
        Actions.runBlocking(runTrajectories);

        // Stop the async updates thread after trajectories have completed
        shutdownThread();
    }

    // Method to properly stop the asyncUpdatesThread
    private void shutdownThread() {
        asyncThread = false; // Stop the loop in the async runnable
        if (asyncUpdatesThread != null) {
            asyncUpdatesThread.interrupt(); // Interrupt any sleeping or waiting thread
            try {
                asyncUpdatesThread.join(); // Wait for the thread to terminate properly
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt(); // Handle interruption and ensure the main thread isn't left interrupted
            }
        }
    }
}
